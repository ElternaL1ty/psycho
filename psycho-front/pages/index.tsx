import type { NextPage } from 'next';
import styles from '../styles/Home.module.css';
import MessageBubble from '../components/MessageBubble/MessageBubble';
import AuthForm from '../components/AuthForm/AuthForm';
import CustomSnack from '../components/CustomSnack/CustomSnack'
import { useState, MutableRefObject } from 'react';
import { setCookie } from 'cookies-next';
import { useRouter } from 'next/router';


const Home: NextPage = () => {
  const [error, setError] = useState<string|null>(null);
  const [success, setSuccess] = useState<string|null>(null);
  const router = useRouter()
  const handleLoginAttempt = async (
    emailRef: MutableRefObject<HTMLInputElement|undefined>, 
    passwordRef: MutableRefObject<HTMLInputElement|undefined>
  ) => {
    try{
        let email_obj = emailRef.current
        let password_obj = passwordRef.current
        if(
            !email_obj ||
            !password_obj ||
            email_obj.value.length==0 || 
            password_obj.value.length==0
        ){
            throw new Error("–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è")
        }
        const res = await fetch(`http://localhost:8000/token`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                "email": email_obj.value,
                "password": password_obj.value
            })
        })
        if(!res.ok)
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
        let data = await res.json()
        setCookie('assistX-token', data.access_token)
        setSuccess("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è...")
        router.push('/dashboard')
    }
    catch(error: any){
        setError(error.message)
    }
  }

  const handleRegisterAttempt = async (
    emailRef: MutableRefObject<HTMLInputElement|undefined>, 
    passwordRef: MutableRefObject<HTMLInputElement|undefined>, 
    repeatPasswordRef: MutableRefObject<HTMLInputElement|undefined>
  ) => {
    try{
        let email_obj = emailRef.current
        let password_obj = passwordRef.current
        let rpassword_obj = repeatPasswordRef.current
        if(
            !email_obj || 
            !password_obj || 
            !rpassword_obj || 
            email_obj.value.length==0 || 
            password_obj.value.length==0 || 
            rpassword_obj.value.length==0
        ){
            throw new Error("–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è")
        }
        if(password_obj.value != rpassword_obj.value){
            throw new Error('–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ –ø–∞—Ä–æ–ª—è –¥–æ–ø—É—â–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞');
        }
        const res = await fetch(`http://localhost:8000/register`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                "email": email_obj.value,
                "password": password_obj.value
            })
        })
        if(!res.ok)
            throw new Error('–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        setSuccess("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤–æ–π—Ç–∏")
    }
    catch(error: any){
        setError(error.message)
    }
  }
  let messages = [
    'üëã –ü—Ä–∏–≤–µ—Ç!',
    '–Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç üòé',
    '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á, –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É, –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—é —Å —Ç–æ–±–æ–π',
    '–î–∞–≤–∞–π –ø–æ–¥—Ä—É–∂–∏–º—Å—è! –ó–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–µ —Å–ø—Ä–∞–≤–∞ –∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ üëâ'
  ]

  return (
    <div className={styles.container}>
      <div className={styles.favinfo}>
        {
          messages.map((message: string, index: number)=>{
            return <MessageBubble text={message} delay={index<=3?index*1.5:0} key={index} vmax={2} role={"assistant"}></MessageBubble>
          })
        }
      </div>
      <AuthForm
        tryLogin={(
          emailRef: MutableRefObject<HTMLInputElement|undefined>,
          passwordRef: MutableRefObject<HTMLInputElement|undefined>
        )=>handleLoginAttempt(emailRef,passwordRef)}
        tryRegister={(
          emailRef: MutableRefObject<HTMLInputElement|undefined>, 
          passwordRef: MutableRefObject<HTMLInputElement|undefined>, 
          repeatPasswordRef: MutableRefObject<HTMLInputElement|undefined>
        )=>handleRegisterAttempt(emailRef, passwordRef, repeatPasswordRef)}
      />
      <CustomSnack 
          open={error?true:false} 
          message={error} 
          handleClose={()=>setError(null)}
          severity="error"/>
        <CustomSnack 
          open={success?true:false} 
          message={success} 
          handleClose={()=>setSuccess(null)}
          severity="success"/>
    </div>
  )
};

export default Home;
